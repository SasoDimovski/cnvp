<?php

namespace Modules\Reports\Repositories;

use App\Models\Activities;
use App\Models\Assignments;
use App\Models\Calendar;
use App\Models\Countries;

use App\Models\Languages;
use App\Models\Projects;
use App\Models\Records;
use App\Models\Users;
use Carbon\Carbon;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use App\Services\ServicesAssignedModules;

class ReportsRepositories
{
    public function getAllRecordsDetail($params): array
    {
        // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –∏–º–∞ –±–∞—Ä–µ–º –µ–¥–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –ø–∞—Ä–∞–º–µ—Ç–∞—Ä –∑–∞ –ø—Ä–µ–±–∞—Ä—É–≤–∞—ö–µ
        $hasFilters = false;

        $searchableKeys = [
            'id_user',
            'name',
            'id_country',
            'id_project',
            'id_assignment',
            'id_activity',
            'year',
            'month',
            'date_from',
            'date_to'
        ];

        foreach ($searchableKeys as $key) {
            if (isset($params[$key]) && $params[$key] !== null && $params[$key] !== '' && $params[$key] !== 'all') {
                $hasFilters = true;
                break;
            }
        }

        // –ê–∫–æ –Ω–µ–º–∞ –∑–∞–¥–∞–¥–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, –≤—Ä–∞—Ç–∏ –ø—Ä–∞–∑–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç
        if (!$hasFilters) {
            return [
                'records' => new \Illuminate\Pagination\LengthAwarePaginator([], 0, 10),
                'users' => collect([]) // –í—Ä–∞—ú–∞–º–µ –ø—Ä–∞–∑–Ω–∞ –∫–æ–ª–µ–∫—Ü–∏—ò–∞ –Ω–∞–º–µ—Å—Ç–æ `null`
            ];
        }

        // –ò–Ω–∏—Ü–∏—ò–∞–ª–∏–∑–∞—Ü–∏—ò–∞ –Ω–∞ query —Å–æ –≤—Ä—Å–∫–∏ –Ω–∞ –º–æ–¥–µ–ª–∏
        $query = Records::with('activities', 'assignments', 'projects', 'countries', 'insertedByUser')
            ->where('records.deleted', 0);

        $queryWithoutProjectFilter = clone $query;
        $queryWithoutProjectFilter->whereHas('activities', function ($query) {
            $query->where('type', 0);
        });


        // –ú–∞–ø–∏—Ä–∞—ö–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—Ç–µ –∑–∞ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞—ö–µ
        $filters = [
            'id_user' => 'records.insertedby',
            'name' => 'users.name',
            'id_country' => 'records.id_country', // –ü–æ–ø—Ä–∞–≤–µ–Ω–æ
            'id_assignment' => 'records.assignment',
            'id_activity' => 'records.activity',
            'year' => 'records.year',
        ];

        foreach ($filters as $paramKey => $dbColumn) {
            if (isset($params[$paramKey]) && $params[$paramKey] !== 'all') {
                $query->where($dbColumn, $params[$paramKey]);
                $queryWithoutProjectFilter->where($dbColumn, $params[$paramKey]);
            }
        }

        if (!empty($params['id_project']) && $params['id_project'] !== 'all') {
                $query->whereIn('records.project', $params['id_project']);
        }


        // –§–∏–ª—Ç—Ä–∏—Ä–∞—ö–µ –ø–æ –º–µ—Å–µ—Ü
        if (isset($params['month']) && $params['month'] !== 'all') {
            $query->whereRaw('MONTH(date) = ?', [$params['month']]);
            $queryWithoutProjectFilter->whereRaw('MONTH(date) = ?', [$params['month']]);
        }

        // –§–∏–ª—Ç—Ä–∏—Ä–∞—ö–µ –ø–æ –æ–ø—Å–µ–≥ –Ω–∞ –¥–∞—Ç—É–º–∏
        if (isset($params['date_from']) || isset($params['date_to'])) {
            $dateFrom = isset($params['date_from']) ? Carbon::createFromFormat('d.m.Y', $params['date_from'])->format('Y-m-d') : null;
            $dateTo = isset($params['date_to']) ? Carbon::createFromFormat('d.m.Y', $params['date_to'])->format('Y-m-d') : null;

            if ($dateFrom && $dateTo) {
                $query->whereBetween('date', [$dateFrom, $dateTo]);
                $queryWithoutProjectFilter->whereBetween('date', [$dateFrom, $dateTo]);
            } elseif ($dateFrom) {
                $query->where('date', '>=', $dateFrom);
                $queryWithoutProjectFilter->where('date', '>=', $dateFrom);
            } elseif ($dateTo) {
                $query->where('date', '<=', $dateTo);
                $queryWithoutProjectFilter->where('date', '<=', $dateTo);
            }
        }

        $totalDurationWithoutProjectFilter = $queryWithoutProjectFilter->sum('duration');

        // –ü–∞–≥–∏–Ω–∞—Ü–∏—ò–∞ –∏ –±—Ä–æ–µ—ö–µ
        $listing = $params['listing'] ?? config('reports.pagination', 10);
        if ($listing === 'a') {
            $listing = $query->count(); // –í—Ä–∞—Ç–∏ –≥–æ –≤–∫—É–ø–Ω–∏–æ—Ç –±—Ä–æ—ò –∞–∫–æ –µ 'a'
        }

        $sortColumn = 'records.date'; // Default –∫–æ–ª–æ–Ω–∞ –∑–∞ —Å–æ—Ä—Ç–∏—Ä–∞—ö–µ
        $sortOrder = 'asc'; // Default –Ω–∞—Å–æ–∫–∞ –∑–∞ —Å–æ—Ä—Ç–∏—Ä–∞—ö–µ


        // –°–æ—Ä—Ç–∏—Ä–∞—ö–µ
        if (isset($params['sort']) && isset($params['order'])) {

            $sortColumn = $params['order'];
            $sortOrder = strtolower($params['sort']);

            if ($sortColumn === 'name') {
                // –°–æ—Ä—Ç–∏—Ä–∞—ö–µ —Å–ø–æ—Ä–µ–¥ `users.name`
                $query->join('users', 'records.insertedby', '=', 'users.id')
                    ->where('records.deleted', 0) // –°–ø–µ—Ü–∏—Ñ–∏—Ü–∏—Ä–∞—ò—Ç–µ —ò–∞ —Ç–∞–±–µ–ª–∞—Ç–∞ –∑–∞ –∫–æ–ª–æ–Ω–∞—Ç–∞ deleted
                    ->select('records.*') // –°–µ–ª–µ–∫—Ç–∏—Ä–∞—ò –≥–∏ —Å–∏—Ç–µ –ø–æ–ª–∏—ö–∞ –æ–¥ records
                  ;
                $sortColumn = 'users.name';
            }

        }

        $query->orderBy($sortColumn, $sortOrder);

        //dd($query->toSql(), $query->getBindings());
        $records=$query->paginate($listing);

        // –î–æ–¥–∞–¥–µ—Ç–µ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞—ö–µ –ø–æ —Ç–∏–ø–æ—Ç –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç
        $queryType1 = clone $query;
        $queryType1->whereHas('activities', function ($query) {
            $query->where('type', 1); // –§–∏–ª—Ç—Ä–∏—Ä–∞—ò –≥–∏ —Å–∞–º–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏—Ç–µ —Å–æ type = 1
        });

        // –ò–∑–≤—Ä—à–∏ –≥—Ä—É–ø–∏—Ä–∞—ö–µ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç –∏ —Å—É–º–∏—Ä–∞—ò duration
        $records_activities = $queryType1->get(); // –ë–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—ò–∞ –∑–∞ –æ–≤–∞–∞ –æ–ø–µ—Ä–∞—Ü–∏—ò–∞

        // –ì—Ä—É–ø–∏—Ä–∞—ò –≥–∏ —Å–ø–æ—Ä–µ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∞ –∏ —Å—É–º–∏—Ä–∞—ò duration
        $activityDurations = $records_activities->groupBy('activities.id')->map(function ($group) {
            return $group->sum('duration');
        });

        // –ò–∑–≤–ª–µ–∫—É–≤–∞—ö–µ –Ω–∞ –ø–æ—á–µ—Ç–Ω–∞—Ç–∞ –∏ –∫—Ä–∞—ò–Ω–∞—Ç–∞ –¥–∞—Ç–∞
        $date1 = $records->min('date'); // –ü–æ—á–µ—Ç–Ω–∞ –¥–∞—Ç–∞
        $date2 = $records->max('date'); // –ö—Ä–∞—ò–Ω–∞ –¥–∞—Ç–∞

        // –§–æ—Ä–º–∞—Ç–∏—Ä–∞—ö–µ –Ω–∞ –¥–∞—Ç–∏—Ç–µ –≤–æ —Ñ–æ—Ä–º–∞—Ç "d.m.Y"
        $date1 = $date1 ? Carbon::parse($date1)->format('d.m.Y') : null;
        $date2 = $date2 ? Carbon::parse($date2)->format('d.m.Y') : null;

        $users = $records->pluck('insertedByUser')->unique('id');
        $projects = $records->pluck('projects')->unique('id');
        $activities = $records_activities->pluck('activities')->unique('id');
        $approvedUsers = $records->whereNotNull('approvedby')->pluck('approvedByUser')->unique('id');

        // üîπ **–§–∏–ª—Ç—Ä–∏—Ä–∞—ö–µ –ø–æ type 0, –Ω–æ —Å–∞–º–æ –∑–∞ —Å–µ–ª–µ–∫—Ç–∏—Ä–∞–Ω–∏—Ç–µ –∑–∞–ø–∏—Å–∏**
        $queryType0 = clone $query; // –ü—Ä–∞–≤–∏–º–µ –∫–æ–ø–∏—ò–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏–æ—Ç query

        $queryType0->whereHas('activities', function ($query) {
            $query->where('activities.type', 0);
        });

        $records_type0 = $queryType0->get(); // –ò–∑–≤—Ä—à—É–≤–∞–º–µ query –∑–∞ —Å–µ–ª–µ–∫—Ç–∏—Ä–∞–Ω–∏—Ç–µ –∑–∞–ø–∏—Å–∏ —Å–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ type 0

        // **–ì—Ä—É–ø–∏—Ä–∞—ö–µ –ø–æ –ø—Ä–æ–µ–∫—Ç–∏ –∏ —Å—É–º–∏—Ä–∞—ö–µ –Ω–∞ durations**
        $projectDurations = $records_type0->groupBy('project')->map(function ($group) {
            return $group->sum('duration');
        });

        $allRecords = $query->get(); // –ó–µ–º–∏ –≥–∏ —Å–∏—Ç–µ –∑–∞–ø–∏—Å–∏ –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—ò–∞

        if ($allRecords->every(fn($record) => !is_null($record->approvedby))) {
            $approvalStatus = 1; // –°–∏—Ç–µ –∑–∞–ø–∏—Å–∏ —Å–µ –æ–¥–æ–±—Ä–µ–Ω–∏
        } elseif ($allRecords->every(fn($record) => is_null($record->approvedby))) {
            $approvalStatus = 2; // –ù–∏—Ç—É –µ–¥–µ–Ω –∑–∞–ø–∏—Å –Ω–µ –µ –æ–¥–æ–±—Ä–µ–Ω
        } else {
            $approvalStatus = 0; // –ú–µ—à–∞–Ω–æ - –Ω–µ–∫–æ–∏ —Å–µ –æ–¥–æ–±—Ä–µ–Ω–∏, –Ω–µ–∫–æ–∏ –Ω–µ
        }
       // dd($projectDurations);





        return [
            'records' => $records,
            'users' => $users,
            'projects' => $projects,
            'date1' => $date1,
            'date2' => $date2,
            'activityDurations' => $activityDurations,
            'activities' => $activities,
            'projectDurations' => $projectDurations,
            'approvedUsers' => $approvedUsers,
            'approvalStatus' =>  $approvalStatus ,
            'totalDurationWithoutProjectFilter' => $totalDurationWithoutProjectFilter,
        ];
    }

    public function getAllUsers($lang)
    {
        $id_lang = Languages::where('lang', $lang)->value('id');

        $assignModules = (new \App\Services\ServicesAssignedModules)->getUserModuleIds(Auth::id(), $id_lang);
//dd($assignModules);
        // –û—Å–Ω–æ–≤–µ–Ω query
        $query = Users::where('deleted', 0);

        // –ê–∫–æ –∫–æ—Ä–∏—Å–Ω–∏–∫–æ—Ç –∏–º–∞ –º–æ–¥—É–ª —Å–æ ID 17, —Ñ–∏–ª—Ç—Ä–∏—Ä–∞—ò –≥–æ —Å–∞–º–æ –Ω–µ–≥–æ
        if (in_array(17, $assignModules)) {
            $query->where('id', Auth::id());
        }

        return $query->select([
            'id',
            'name',
            'surname',
            'username',
        ])->orderBy('name', 'ASC')->get();
    }
    public function getAllRecordsGroup($params):array
    {

        // –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ –∏–º–∞ –±–∞—Ä–µ–º –µ–¥–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –ø–∞—Ä–∞–º–µ—Ç–∞—Ä –∑–∞ –ø—Ä–µ–±–∞—Ä—É–≤–∞—ö–µ
        $hasFilters = false;

        $searchableKeys = [
            'id_user',
            'id_country',
            'id_project',
            'id_assignment',
            'id_activity',
            'year',
            'month',
            'date_from',
            'date_to'
        ];

        foreach ($searchableKeys as $key) {
            if (isset($params[$key]) && $params[$key] !== null && $params[$key] !== '' && $params[$key] !== 'all') {
                $hasFilters = true;
                break;
            }
        }

        // –ê–∫–æ –Ω–µ–º–∞ –∑–∞–¥–∞–¥–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, –≤—Ä–∞—Ç–∏ –ø—Ä–∞–∑–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç
        if (!$hasFilters) {
            return [
                'records' => new \Illuminate\Pagination\LengthAwarePaginator([], 0, 10),
            ];
        }

        $query = Records::with('activities', 'assignments', 'projects', 'countries', 'insertedByUser')
            ->where('deleted', 0);

        $filters = [
            'id_user' => 'insertedby',
            'id_country' => 'records.id_country', // –ü–æ–ø—Ä–∞–≤–µ–Ω–æ
            'id_assignment' => 'assignment',
            'id_activity' => 'activity',
            'year' => 'year',
        ];

        foreach ($filters as $paramKey => $dbColumn) {
            if (isset($params[$paramKey]) && $params[$paramKey] !== 'all') {
                $query->where($dbColumn, $params[$paramKey]);
            }
        }

        if (!empty($params['id_project']) && $params['id_project'] !== 'all') {
            $query->whereIn('records.project', $params['id_project']);
        }

        if (isset($params['month']) && $params['month'] !== 'all') {
            $query->whereRaw('MONTH(date) = ?', [$params['month']]);
        }

        if (isset($params['date_from']) || isset($params['date_to'])) {
            $dateFrom = isset($params['date_from']) ? Carbon::createFromFormat('d.m.Y', $params['date_from'])->format('Y-m-d') : null;
            $dateTo = isset($params['date_to']) ? Carbon::createFromFormat('d.m.Y', $params['date_to'])->format('Y-m-d') : null;

            if ($dateFrom && $dateTo) {
                $query->whereBetween('date', [$dateFrom, $dateTo]);
            } elseif ($dateFrom) {
                $query->where('date', '>=', $dateFrom);
            } elseif ($dateTo) {
                $query->where('date', '<=', $dateTo);
            }
        }

        $groupedResults = $query->get()->groupBy(function ($record) {
            return $record->activity . '|' . $record->assignment . '|' . $record->project . '|' . $record->id_country . '|' . $record->insertedby;
        });

        $processedResults = $groupedResults->map(function ($group) {
            $first = $group->first();

            return (object)[
                'id_country' => $first->id_country,
                'countries' => $first->countries,
                'insertedby' => $first->insertedby,
                'insertedByUser' => $first->insertedByUser,
                'activity' => $first->activity,
                'activities' => $first->activities,
                'assignment' => $first->assignment,
                'assignment_code' => $first->assignments->code ?? null,
                'assignments' => $first->assignments,
                'project' => $first->project,
                'projects' => $first->projects,
                'project_code' => $first->projects->code ?? null,
                'duration' => $group->sum('duration'),
                'year' => $group->pluck('year')->unique()->implode(', '),
                'date' => Carbon::parse($group->min('date'))->format('d.m.Y') . ' - ' . Carbon::parse($group->max('date'))->format('d.m.Y'),
            ];
        });

        if (isset($params['sort']) && isset($params['order'])) {
            $sortField = $params['order'];
            $sortDirection = strtolower($params['sort']) === 'desc' ? SORT_DESC : SORT_ASC;

            $processedResults = $processedResults->sortBy(function ($record) use ($sortField) {
                // –°–ø–µ—Ü–∏—ò–∞–ª–µ–Ω —Å–ª—É—á–∞—ò –∑–∞ —Å–æ—Ä—Ç–∏—Ä–∞—ö–µ –ø–æ –∏–º–µ –Ω–∞ –∫–æ—Ä–∏—Å–Ω–∏–∫
                if ($sortField === 'name' && isset($record->insertedByUser)) {
                    return $record->insertedByUser->name ?? null;
                }
                if ($sortField === 'id_country' && isset($record->countries)) {
                    return $record->countries->name ?? null; // –°–æ—Ä—Ç–∏—Ä–∞—ö–µ –ø–æ `name` –Ω–∞ –∑–µ–º—ò–∞—Ç–∞
                }
                // –°–æ—Ä—Ç–∏—Ä–∞—ö–µ –ø–æ –æ–±–∏—á–Ω–∏ –ø–æ–ª–∏—ö–∞
                return $record->{$sortField} ?? null;
            }, SORT_REGULAR, $sortDirection === SORT_DESC);
        } else {
            // –î–µ—Ñ–æ–ª—Ç —Å–æ—Ä—Ç–∏—Ä–∞—ö–µ –ø–æ `duration` –≤–æ –æ–ø–∞—ì–∞—á–∫–∏ —Ä–µ–¥–æ—Å–ª–µ–¥
            $processedResults = $processedResults->sortByDesc('duration');
        }


        // –ü–∞–≥–∏–Ω–∞—Ü–∏—ò–∞ –∏ –±—Ä–æ–µ—ö–µ
        $perPage = $params['listing'] ?? config('reports.pagination', 10);
        if ($perPage === 'a') {
            $perPage = $query->count(); // –í—Ä–∞—Ç–∏ –≥–æ –≤–∫—É–ø–Ω–∏–æ—Ç –±—Ä–æ—ò –∞–∫–æ –µ 'a'
        }


        // Pagination logic
        $currentPage = LengthAwarePaginator::resolveCurrentPage();
        $paginatedResults = new LengthAwarePaginator(
            $processedResults->forPage($currentPage, $perPage)->values(),
            $processedResults->count(),
            $perPage,
            $currentPage,
            ['path' => LengthAwarePaginator::resolveCurrentPath()]
        );

        return [
            'records' => $paginatedResults,  // Return the paginated results here
        ];
    }

    public function getAllProjects()
    {
        return Projects::where('deleted', 0)
            ->orderBy('name', 'ASC')
            ->select(['id', 'name', 'code'])
            ->get();
    }

    public function getAllCountries()
    {
        return Countries::where('deleted', 0)
            ->orderBy('name', 'ASC')
            ->select(['id', 'name'])
            ->get();
    }

    public function getAllAssignments(): \Illuminate\Database\Eloquent\Collection
    {

    return Assignments::with('projects:id,name') // –í—á–∏—Ç—É–≤–∞–º–µ —Å–∞–º–æ –ø–æ—Ç—Ä–µ–±–Ω–∏ –ø–æ–ª–∏—ö–∞
    ->where('deleted', 0)
        ->orderBy('name', 'ASC')
        ->get();
    }

    public function getYears()
    {
        return Calendar::select('year')
            ->distinct()
            ->orderBy('year', 'desc')
            ->pluck('year')
            ->isNotEmpty() ? Calendar::select('year')->distinct()->orderBy('year', 'desc')->pluck('year') : null;
    }

    public function getAllActivities()
    {
        return Activities::where('deleted', 0)
            ->orderBy('name', 'ASC')
            ->select(['id', 'name'])
            ->get();
    }


    public function getReportsDay($date, $id_user,$id_country): \Illuminate\Database\Eloquent\Collection
    {
        return Reports::with([
            'activities',
            'assignments',
            'projects.assignments',  // –í—á–∏—Ç–∞—ò assignments –ø–æ–≤—Ä–∑–∞–Ω–∏ —Å–æ –ø—Ä–æ–µ–∫—Ç–∏—Ç–µ
            'projects.activities'    // –í—á–∏—Ç–∞—ò activities –ø–æ–≤—Ä–∑–∞–Ω–∏ —Å–æ –ø—Ä–æ–µ–∫—Ç–∏—Ç–µ
        ])
            ->whereDate('date', $date)
            ->where('insertedby', $id_user)
            ->where('id_country', $id_country)
            ->orderBy('id', 'desc')
            ->get();
    }

    public function getReportsWeekGroup($date, $id_user, $id_country): \Illuminate\Support\Collection
    {

        // –ü—Ä–µ—Å–º–µ—Ç–∫–∞ –Ω–∞ –¥–∞—Ç—É–º–æ—Ç –Ω–∞ –∫—Ä–∞—ò–æ—Ç –Ω–∞ –Ω–µ–¥–µ–ª–∞—Ç–∞ (–Ω–µ–¥–µ–ª–∞)
        $selectedDate = Carbon::createFromFormat('Y-m-d', $date);

        // –ü—Ä–µ—Å–º–µ—Ç–∫–∞ –Ω–∞ –ø–æ—á–µ—Ç–æ–∫–æ—Ç –Ω–∞ –Ω–µ–¥–µ–ª–∞—Ç–∞ (–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫)
        $startOfWeek = $selectedDate->copy()->startOfWeek(Carbon::MONDAY);

        // –ü—Ä–µ—Å–º–µ—Ç–∫–∞ –Ω–∞ –∫—Ä–∞—ò–æ—Ç –Ω–∞ –Ω–µ–¥–µ–ª–∞—Ç–∞ (–Ω–µ–¥–µ–ª–∞)
        $endOfWeek = $selectedDate->copy()->endOfWeek(Carbon::SUNDAY);

        $records = Reports::with([
            'activities',
            'assignments',
            'projects.assignments',
            'projects.activities'
        ])
            ->whereNotNull('id_group')
            ->where('insertedby', $id_user)
            ->whereBetween('date', [$startOfWeek->toDateString(), $endOfWeek->toDateString()])
            ->where('id_country', $id_country)
            ->orderBy('id', 'desc')
            ->get();

        $groupedReports = $records->groupBy(function ($record) {
            return ($record->note ?? 'no_note') . '_' .
                ($record->project ?? 'no_project') . '_' .
                ($record->activity ?? 'no_activity') . '_' .
                ($record->assignment ?? 'no_assignment') . '_' .
                ($record->id_group ?? 'no_group');
        });

        $result = $groupedReports->map(function ($group) {
            $firstRecord = $group->first();

            $dates = $group->pluck('date')->values()->all();
            $durations = $group->pluck('duration')->values()->all();

            // –ö–æ–º–±–∏–Ω–∏—Ä–∞—ò—Ç–µ –≥–∏ –¥–∞—Ç—É–º–∏—Ç–µ –∏ –≤—Ä–µ–º–µ—Ç—Ä–∞–µ—ö–∞—Ç–∞
            $dateDurations = [];
            for ($i = 0; $i < 7; $i++) {
                $dateDurations[] = [
                    'date' => $dates[$i] ?? null,
                    'duration' => $durations[$i] ?? null,
                ];
            }
            return [
                'note' => $firstRecord->note,
                'id_group' => $firstRecord->id_group,
                'id_project' => $firstRecord->project,
                'id_activity' => $firstRecord->activity,
                'id_assignment' => $firstRecord->assignment,
                'project_assignments' => $firstRecord->projects->assignments->map(function ($assignment) {
                    return [
                        'id' => $assignment->id,
                        'name' => $assignment->name
                    ];
                }),
                'project_activities' => $firstRecord->projects->activities->map(function ($activity) {
                    return [
                        'id' => $activity->id,
                        'name' => $activity->name
                    ];
                }),
                'date_durations' => $dateDurations,
            ];
        });

        return $result->values();
    }


    public function showReportsDay($date, $id_user,$id_country): \Illuminate\Database\Eloquent\Collection
    {
        //dd($id_country);
        return Reports::with([
            'activities',
            'assignments',
            'projects',
        ])
            ->whereDate('date', $date)
            ->where('insertedby', $id_user)
            ->where('id_country', $id_country)
            ->orderBy('id', 'desc')
            ->get();

    }

    public function deleteReportsDay($date, $id_country, $id_user): bool
    {
        //dd($date);
        $formattedDate = Carbon::createFromFormat('Y-m-d', $date)->format('Y-m-d');

        // –ë—Ä–∏—à–µ—ö–µ –Ω–∞ –∑–∞–ø–∏—Å–∏—Ç–µ —Å–ø–æ—Ä–µ–¥ —É—Å–ª–æ–≤–∏—Ç–µ
        return Reports::whereDate('date', $formattedDate)
            ->where('id_country', $id_country)
            ->where('insertedby', $id_user)
            ->where('lockrecord', 0)
            ->delete();
    }
    public function deleteReportsWeek($date, $id_country, $id_user): bool
    {
        // –§–æ—Ä–º–∞—Ç–∏—Ä–∞—ò –≥–æ –≤–Ω–µ—Å–µ–Ω–∏–æ—Ç –¥–∞—Ç—É–º
        $formattedDate = Carbon::createFromFormat('Y-m-d', $date)->format('Y-m-d');

        // –ü—Ä–µ—Å–º–µ—Ç–∞—ò –≥–æ –ø–æ—á–µ—Ç–æ–∫–æ—Ç –Ω–∞ –Ω–µ–¥–µ–ª–∞—Ç–∞ (6 –¥–µ–Ω–∞ –ø—Ä–µ–¥ –¥–∞–¥–µ–Ω–∏–æ—Ç –¥–∞—Ç—É–º)
        $startDate = Carbon::createFromFormat('Y-m-d', $date)->subDays(6)->format('Y-m-d');

        // –ë—Ä–∏—à–µ—ö–µ –Ω–∞ –∑–∞–ø–∏—Å–∏—Ç–µ —Å–ø–æ—Ä–µ–¥ —É—Å–ª–æ–≤–∏—Ç–µ
        return Reports::whereBetween('date', [$startDate, $formattedDate])
            ->where('id_country', $id_country)
            ->where('insertedby', $id_user)
            ->where('lockrecord', 0)
            ->delete();
    }

    public function getReportsTableByIdUser($id_user, $params): \Illuminate\Contracts\Pagination\LengthAwarePaginator
    {
        $year = $params['year'] ?? date('Y');
        $month = $params['month'] ?? date('m');

        $records = Reports::with('activities', 'assignments', 'projects', 'countries')
            ->leftJoin('calendar', function ($join) {
                $join->on(DB::raw('DATE(records.date)'), '=', DB::raw('DATE(calendar.date)'));
            })
            ->select('records.*', 'calendar.lock_ as locket_year')
            ->where('insertedby', $id_user)
            ->where('deleted', 0);

        // –§–∏–ª—Ç—Ä–∏—Ä–∞—ö–µ –ø–æ –¥—Ä–∂–∞–≤–∞ (–∞–∫–æ –µ —Ä–∞–∑–ª–∏—á–Ω–æ –æ–¥ 'all')
        if (isset($params['id_country']) && $params['id_country'] !== 'all') {
            $records->where('records.id_country', '=', $params['id_country']);
        }

        // –§–∏–ª—Ç—Ä–∏—Ä–∞—ö–µ –ø–æ –≥–æ–¥–∏–Ω–∞ (—Å–µ–∫–æ–≥–∞—à —Å–µ –±–∞—Ä–∞ –æ–¥—Ä–µ–¥–µ–Ω–∞ –≥–æ–¥–∏–Ω–∞)
        $records->where('records.year', '=', $year);

        // –§–∏–ª—Ç—Ä–∏—Ä–∞—ö–µ –ø–æ –º–µ—Å–µ—Ü (–∞–∫–æ month –Ω–µ –µ 'all')
        if (isset($params['month']) && $params['month'] !== 'all') {
            $records->whereRaw('MONTH(records.date) = ?', [$month]);
        }

        // –ö–æ–Ω–≤–µ—Ä–∑–∏—ò–∞ –∏ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞—ö–µ –ø–æ –æ–ø—Å–µ–≥ –Ω–∞ –¥–∞—Ç—É–º–∏ (—Å–∞–º–æ –¥–µ–ª–æ—Ç Y-m-d)
        if (isset($params['date_from']) && isset($params['date_to'])) {
            $dateFrom = Carbon::createFromFormat('d.m.Y', $params['date_from'])->format('Y-m-d');
            $dateTo = Carbon::createFromFormat('d.m.Y', $params['date_to'])->format('Y-m-d');

            $records->whereRaw('DATE(records.date) BETWEEN ? AND ?', [$dateFrom, $dateTo]);
        } elseif (isset($params['date_from'])) {
            $dateFrom = Carbon::createFromFormat('d.m.Y', $params['date_from'])->format('Y-m-d');
            $records->whereRaw('DATE(records.date) >= ?', [$dateFrom]);
        } elseif (isset($params['date_to'])) {
            $dateTo = Carbon::createFromFormat('d.m.Y', $params['date_to'])->format('Y-m-d');
            $records->whereRaw('DATE(records.date) <= ?', [$dateTo]);
        }

        // –ü–∞–≥–∏–Ω–∞—Ü–∏—ò–∞ –∏ –±—Ä–æ–µ—ö–µ
        $listing = config('records.pagination_records');
        if (isset($params['listing'])) {
            $listing = $params['listing'] == 'a' ? $records->count() : $params['listing'];
        }

        // –°–æ—Ä—Ç–∏—Ä–∞—ö–µ
        if (!isset($params['sort']) && !isset($params['order'])) {
            $records->orderBy('records.id', 'DESC');
        } else {
            $allowedColumns = ['id', 'date', 'year'];
            $orderBy = in_array($params['order'] ?? 'id', $allowedColumns) ? $params['order'] : 'id';
            $sort = in_array(strtolower($params['sort'] ?? 'desc'), ['asc', 'desc']) ? $params['sort'] : 'desc';
            $records->orderBy($orderBy, $sort);
        }

        return $records->paginate($listing);
    }








    public function showReportsWeek($date, $id_user, $id_country): \Illuminate\Database\Eloquent\Collection
    {
        // –ü—Ä–µ—Å–º–µ—Ç–∫–∞ –Ω–∞ –¥–∞—Ç—É–º–æ—Ç –Ω–∞ –∫—Ä–∞—ò–æ—Ç –Ω–∞ –Ω–µ–¥–µ–ª–∞—Ç–∞ (–Ω–µ–¥–µ–ª–∞)
        $selectedDate = Carbon::createFromFormat('Y-m-d', $date);

        // –ü—Ä–µ—Å–º–µ—Ç–∫–∞ –Ω–∞ –ø–æ—á–µ—Ç–æ–∫–æ—Ç –Ω–∞ –Ω–µ–¥–µ–ª–∞—Ç–∞ (–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫)
        $startOfWeek = $selectedDate->copy()->startOfWeek(Carbon::MONDAY);

        // –ü—Ä–µ—Å–º–µ—Ç–∫–∞ –Ω–∞ –∫—Ä–∞—ò–æ—Ç –Ω–∞ –Ω–µ–¥–µ–ª–∞—Ç–∞ (–Ω–µ–¥–µ–ª–∞)
        $endOfWeek = $selectedDate->copy()->endOfWeek(Carbon::SUNDAY);

        // –ü—Ä–µ–≤–∑–µ–º–∏ –≥–∏ –∑–∞–ø–∏—Å–∏—Ç–µ —à—Ç–æ —Å–µ –Ω–∞–æ—ì–∞–∞—Ç –≤–æ —Ç–∞–∞ –Ω–µ–¥–µ–ª–∞ (–æ–¥ –ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫ –¥–æ –Ω–µ–¥–µ–ª–∞)
        return Reports::with([
            'activities',
            'assignments',
            'projects',
        ])
            ->whereBetween('date', [$startOfWeek->toDateString(), $endOfWeek->toDateString()])
            ->where('insertedby', $id_user)
            ->where('id_country', $id_country)
            ->orderBy('date', 'desc')
            ->get();
    }




    public function getAllProjectsTable($year)
    {
        $startOfYear = Carbon::createFromFormat('Y', $year)->startOfYear()->format('Y-m-d');
        $endOfYear = Carbon::createFromFormat('Y', $year)->endOfYear()->format('Y-m-d');

        return Projects::where('deleted', 0)
            ->where(function ($query) use ($startOfYear, $endOfYear) {
                $query->where('end_date', '>=', $startOfYear)
                    ->orWhereNull('end_date');  // –ü—Ä–æ–µ–∫—Ç–∏—Ç–µ –±–µ–∑ end_date —Å–µ —Å–º–µ—Ç–∞–∞—Ç –∑–∞ –∞–∫—Ç–∏–≤–Ω–∏
            })
            ->orderBy('name', 'ASC')
            ->get();
    }
    public function getActivities($id_project)
    {
        $project = Projects::with('activities')->orderBy('name', 'ASC')->find($id_project);
        return $project ? $project->activities : collect();
    }






}
